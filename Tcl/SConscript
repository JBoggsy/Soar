#!/usr/bin/python
# Project: Soar <http://soar.googlecode.com>
# Author: Mazin Assanie

from dataclasses import dataclass
from pathlib import Path
import subprocess
import os
import sys
import SCons.Script

Import('env', 'InstallDir')
clone = env.Clone()

# Set up variables (some are hardcoded for now)
LIBNAME = 'tclsoarlib'

INDENT = '    '
NO_TCL_MSG = 'Tcl cannot be built: no Tcl found'

@dataclass
class TclInstallInfo:
    home: Path
    lib_dir: Path
    include_dir: Path
    # the name of the library to use in -l... directives
    dyn_lib_name: str
    # The name of the library to use in #include <...> directives
    include_lib_name: str
    using_framework: bool = False

    def is_valid(self):
        if not self.lib_dir.exists():
            return False, f'lib dir does not exist: "{self.lib_dir}"'
        if not (self.lib_dir / self.dyn_lib_name).exists():
            return False, f'lib dir does not contain {self.dyn_lib_name}: "{self.lib_dir}"'
        if not self.include_dir.exists():
            return False, f'include dir does not exist: "{self.include_dir}"'
        if not (self.include_dir / 'tcl.h').exists():
            return False, f'include dir does not contain tcl.h: "{self.include_dir}"'
        return True, ''

def get_tcl_from_local_dir(local_compiled_dir=None) -> TclInstallInfo:
    if not local_compiled_dir:
        return None

    home_dir = Path(local_compiled_dir)
    install_info = TclInstallInfo(
        home=home_dir,
        lib_dir=home_dir / 'lib',
        include_dir=home_dir / 'include',
        dyn_lib_name='libtcl8.6.dylib',
        include_lib_name='tcl8.6',
    )
    valid, msg = install_info.is_valid()
    if not valid:
        print(f'{INDENT}Tcl not found in directory: {msg}')
        return None

    return install_info

def get_tcl_install_info_mac(local_compiled_dir=None) -> TclInstallInfo:
    install_info = get_tcl_from_local_dir(local_compiled_dir)
    if not install_info:
        # brew-installed?
        try:
            brew_installed_dir = subprocess.check_output(['brew', '--prefix', 'tcl-tk']).decode().strip()
        except subprocess.CalledProcessError:
            print(f"{INDENT}Tcl not brew-installed")
        install_info = get_tcl_from_local_dir(brew_installed_dir)

    if not install_info:
        # Otherwise, try using the system-installed Tcl
        tcl_home = Path('/Library/Frameworks/Tcl.framework/Versions/Current')
        install_info = TclInstallInfo(
            home=tcl_home,
            lib_dir=tcl_home,
            include_dir=tcl_home / 'Headers',
            dyn_lib_name='Tcl',
            include_lib_name='Tcl',
            using_framework=True,
        )
        valid, msg = install_info.is_valid()
        if valid:
            return install_info
        print(f'{INDENT}System Tcl not found: {msg}')

    return install_info


include_dirs = [ clone.Dir(('#Core/%s/src') % d).abspath for d in 'ElementXML'.split() ]
includes = ' '.join(' -I%s' % d for d in include_dirs)
cpps = ' '.join(' %s' % d for d in include_dirs)

print("Looking for Tcl...")
if sys.platform == 'darwin':
    install_info = get_tcl_install_info_mac(GetOption('tcl'))
    if not install_info:
        print(f'{INDENT}{NO_TCL_MSG}')
        Return()
    print(f"{INDENT}Building TclSoarLib using Tcl from: " + str(install_info.home))

    clone.Append(CXXFLAGS = Split('-I' + str(install_info.include_dir.absolute()) + ' -I' + includes))
    clone.Append(CPPPATH = Split(str(install_info.include_dir.absolute()) + ' ' + cpps))
    clone.Append(LIBPATH = [install_info.lib_dir.absolute()])


# elif sys.platform == 'win32':
#     tcl_platform_dir = os.path.join('C:/Tcl')

#     tcl_user_platform_dir = GetOption('tcl')

#     if tcl_user_platform_dir:
#         tcl_platform_dir = tcl_user_platform_dir

#     tcl_libs = clone.Dir(os.path.join(tcl_platform_dir, 'lib'))
#     tcl_headers = clone.Dir(os.path.join(tcl_platform_dir, 'include'))
#     tcl_bins = clone.Dir(os.path.join(tcl_platform_dir, 'bin'))
#     tcl_libname = 'tcl86.lib'
#     tcl_lib = 'tcl86'
# else:
#     tcl_platform_dir = os.path.join('/opt/ActiveTcl-8.6')

#     tcl_user_platform_dir = GetOption('tcl')

#     if tcl_user_platform_dir:
#         tcl_platform_dir = tcl_user_platform_dir

#     tcl_libs = clone.Dir(os.path.join(tcl_platform_dir, 'lib'))
#     tcl_headers = clone.Dir(os.path.join(tcl_platform_dir, 'include'))
#     tcl_bins = clone.Dir(os.path.join(tcl_platform_dir, 'bin'))
#     tcl_libname = 'libtcl8.6.so'
#     tcl_lib = 'tcl8.6'

# if ((not tcl_libs.exists()) or (not tcl_headers.exists()) or
#     (not File(os.path.join(tcl_headers.abspath, 'tcl.h')).exists()) or
#     (not File(os.path.join(tcl_libs.abspath, tcl_libname)).exists())) :
#     print('Tcl headers and libraries not found at ' + tcl_platform_dir + ', not building TclSoarLib.')
#     sys.exit()
#     Return()
# else:
#     print('TclSoarLib is buildable.')

# TODO: these lines are needed again for windows
# clone.Append(CXXFLAGS = Split('-I' + str(install_info.include_dir.absolute()) + ' -I' + includes))
# clone.Append(CPPPATH = Split(str(install_info.include_dir.absolute()) + ' ' + cpps))
# clone.Append(LIBPATH = [install_info.lib_dir.absolute()])
clone.Append(CPPFLAGS = ['-w'])

# Set up compiler flags
if os.name == 'posix':
  clone.Append(CXXFLAGS = Split('-Wno-unused -fno-strict-aliasing'))

#-fPic is needed to make the code position independent.  Necessary for Tcl.
if sys.platform == 'darwin':
  # Link error occurs if we include the -bundle flag with -flat_namespace, so we removed it
  clone.Append(SHLINKFLAGS=Split('$LINKFLAGS -flat_namespace -undefined suppress -fmessage-length=0'))
  install_name = os.path.join('@loader_path', env['LIBPREFIX'] + 'TclSoarLib' + env['SHLIBSUFFIX'])
  clone.Append(LINKFLAGS = ['-install_name', install_name])
  if install_info.using_framework:
    clone.Append(LINKFLAGS = ['-framework', install_info.dyn_lib_name])
  else:
    clone.Append(LIBS = [install_info.dyn_lib_name])
elif sys.platform.startswith('linux'):
  # TODO: currently not supporting --tcl param with custom tcl path
  try:
    clone.ParseConfig('pkg-config tcl --libs --cflags')
  except OSError:
    print(f"{INDENT}pkg-config didn't find tcl package; try `apt-get install tcl-dev`")
    print(f"{INDENT}{NO_TCL_MSG}")
    Return()
  print(f"{INDENT}Building TclSoarLib using tcl found with pkg-config")
  clone.Append(CPPFLAGS = ['-fPIC'])
  clone.Append(LIBS = ['Soar'])
  # Currently requires Tcl 8.6 b/c it supports multiple threads without manual compilation.  The following line
  # hard-codes the path of the current Tcl 8.6 path on this system into the executable
  # TODO: why? Wouldn't that make Soar impossible to distribute?
  clone.Append(LINKFLAGS = ['-Wl,-rpath'])
elif os.name == 'nt':
  # Windows DLLs need to get linked to dependencies, whereas Linux and Mac shared objects do not
  # (not sure if this is really needed for TclSoarLib)
  clone.Append(LIBS = ['advapi32'])
  clone.Append(LIBS = [tcl_lib, 'Soar'])

# Copy tcl scripts that library needs
tcl_scripts = InstallDir(clone, env['OUT_DIR'] + '/tcl', 'tcl')

# Create the TclSoarLib dll and tclindex file
lib = clone.SharedLibrary(LIBNAME, Glob('src/*.cpp'))[0]

# Install TclSoarLib and return
t = clone.Install(clone.Dir(env['OUT_DIR']), lib)
clone.Alias('tclsoarlib', [t, tcl_scripts])
